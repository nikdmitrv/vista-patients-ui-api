{"version":3,"sources":["components/PatientsList/Tabs/Tab.js","components/PatientsList/Tabs/index.js","components/PatientsList/Display/Item.js","redux/actions.js","redux/types.js","components/PatientsList/Display/index.js","components/PatientsList/index.js","components/PatientInfo/index.js","App.js","serviceWorker.js","index.js","redux/reducer.js"],"names":["Tab","props","className","onClick","handleDisplayStatus","value","style","active","color","borderBottom","paddingBottom","title","toUpperCase","amount","Tabs","presentAmount","displayStatus","quittingAmount","connect","dispatch","selectPatient","patientInfo","type","selectedPatient","selectPatientAC","historyNumber","lastName","firstName","patrName","bedNumber","cause","Display","status","handleThirdField","list","map","patient","key","PatientsList","state","present","quitting","setState","fetch","then","data","json","response","this","length","Component","store","src","alt","disabled","dob","diff","Date","now","Math","abs","getUTCFullYear","calculateAge","birthDate","diagnosis","App","Boolean","window","location","hostname","match","createStore","action","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6dc996a8.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Tab(props) {\n    return (<div\n        className=\"patients-list_tabs__tab\"\n        onClick={() => { props.handleDisplayStatus(props.value) }}\n        style={props.active ? {\n            color: \"#3398cc\",\n            borderBottom: \"solid 3px #3398cc\",\n            paddingBottom: \"17px\"\n        } : null}\n    >\n        {props.title.toUpperCase()}({props.amount})\n        </div>);\n}\n\nexport default Tab;","import React from 'react';\nimport Tab from './Tab'\n\nfunction Tabs(props) {\n    return (<div className=\"patients-list_tabs\">\n        <Tab\n            title=\"Присутсвуют\"\n            amount={props.presentAmount}\n            handleDisplayStatus={props.handleDisplayStatus}\n            value=\"present\"\n            active={props.displayStatus === 'present' ? true : false}\n        ></Tab>\n        <Tab\n            title=\"Выбывшие\"\n            amount={props.quittingAmount}\n            handleDisplayStatus={props.handleDisplayStatus}\n            value=\"quitting\"\n            active={props.displayStatus === 'quitting' ? true : false}\n        ></Tab>\n    </div>);\n}\n\nexport default Tabs;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { selectPatientAC } from '../../../redux/actions'\n\nfunction Item(props) {\n    const handlePatientSelection = () => {\n        props.selectPatient(props.patientInfo)\n    }\n\n    const { patientInfo } = props\n    return (<tr onClick={handlePatientSelection} className=\"patients-list_display_row\">\n        <td>{patientInfo.historyNumber}</td>\n        <td>{`${patientInfo.lastName} ${patientInfo.firstName} ${patientInfo.patrName}`}</td>\n        <td>{patientInfo.bedNumber || patientInfo.cause}</td>\n    </tr>);\n\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        selectPatient: (patientInfo) => dispatch(selectPatientAC(patientInfo))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Item);","import { SELECT_PATIENT } from './types';\n\nconst selectPatientAC = (patientInfo) => {\n    return {\n        type: SELECT_PATIENT,\n        selectedPatient: patientInfo,\n    }\n}\n\nexport { selectPatientAC }","export const SELECT_PATIENT = 'SELECT_PATIENT';","import React from 'react';\n\nimport Item from './Item'\n\nfunction Display(props) {\n    const handleThirdField = () => {\n        const { status } = props\n        if (status === 'present') return 'Номер палаты';\n        if (status === 'quitting') return 'Причина выбытия';\n    }\n\n    return (\n        <table className=\"patients-list_display\">\n            <tbody>\n                <tr>\n                    <th>№ ИБ</th>\n                    <th>ФИО</th>\n                    <th>{handleThirdField()}</th>\n                </tr>\n                {props.list && props.list.map(patient => {\n                    return <Item key={patient.historyNumber} patientInfo={patient}></Item>\n                })}\n            </tbody>\n        </table>);\n}\n\nexport default Display;","import React, { Component } from 'react';\n\nimport Tabs from './Tabs';\nimport Display from './Display';\n\nclass PatientsList extends Component {\n    state = {\n        present: null,\n        quitting: null,\n        displayStatus: 'present',\n    }\n\n    handleDisplayStatus = (status) => {\n        this.setState({ displayStatus: status })\n    }\n\n    componentDidMount() {\n        fetch('/patients?list=present')\n            .then(data => data.json())\n            .then(response => this.setState({ present: response.data }))\n        fetch('/patients?list=quitting')\n            .then(data => data.json())\n            .then(response => this.setState({ quitting: response.data }))\n    }\n\n    render() {\n        const { quitting, present, displayStatus } = this.state\n        return (<div className=\"patients-list\">\n            <Tabs\n                quittingAmount={quitting ? quitting.length : 0}\n                presentAmount={present ? present.length : 0}\n                handleDisplayStatus={this.handleDisplayStatus}\n                displayStatus={displayStatus}\n            ></Tabs>\n            <Display status={displayStatus} list={this.state[displayStatus]}></Display>\n        </div>);\n    }\n}\n\nexport default PatientsList;","import React from 'react';\nimport { connect } from 'react-redux';\n\nfunction PatientInfo(props) {\n    function calculateAge(dob) {\n        const diff = Date.now() - new Date(dob)\n        return Math.abs(new Date(diff).getUTCFullYear() - 1970)\n    }\n\n    const { selectedPatient } = props\n    return (<div className=\"patient-info\">\n        <div className=\"patient-info_header\">\n            <span>Информация о пациенте</span>\n            <img className=\"patient-info_header__arrow\"\n                src='./left-arrow.png'\n                alt=\"left arrow\"></img>\n        </div>\n        <div className=\"patient-info_content\">\n            <div className=\"patient-info_content_inputContainer\">\n                <label>ФИО</label>\n                <input disabled\n                    className=\"patient-info_content__input\"\n                    value={selectedPatient && `${selectedPatient.lastName} ${selectedPatient.firstName} ${selectedPatient.patrName}`}\n                ></input>\n            </div>\n            <div className=\"patient-info_content_inputContainer\">\n                <label>Возраст</label>\n                <input disabled\n                    className=\"patient-info_content__input\"\n                    value={selectedPatient && calculateAge(selectedPatient.birthDate)}\n                ></input>\n            </div>\n            <div className=\"patient-info_content_inputContainer\">\n                <label>Диагноз</label>\n                <input disabled\n                    className=\"patient-info_content__input\"\n                    value={selectedPatient && selectedPatient.diagnosis}\n                ></input>\n            </div>\n        </div>\n    </div>);\n\n}\n\nconst mapStateToProps = (store) => {\n    return { selectedPatient: store.selectedPatient }\n}\n\nexport default connect(mapStateToProps)(PatientInfo);","import React from 'react';\nimport PatientsList from './components/PatientsList';\nimport PatientInfo from './components/PatientInfo';\n\nimport './styles/App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PatientInfo></PatientInfo>\n      <PatientsList></PatientsList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './redux/reducer';\n\n\nconst store = createStore(reducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { SELECT_PATIENT } from './types'\n\nexport default function (state = {}, action) {\n    switch (action.type) {\n        case SELECT_PATIENT:\n            return { ...state, selectedPatient: action.selectedPatient }\n\n        default:\n            return state;\n    }\n}\n"],"sourceRoot":""}